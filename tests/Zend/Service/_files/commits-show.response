HTTP/1.1 200 OK
Server: nginx/0.7.61
Date: Fri, 12 Feb 2010 12:25:54 GMT
Content-type: application/json; charset=utf-8
Connection: close
Status: 200 OK
Etag: "919873f429620f76a4123604252da904"
X-runtime: 45ms
Content-length: 7150
Set-cookie: _github_ses=BAh7BiIKZmxhc2hJQzonQWN0aW9uQ29udHJvbGxlcjo6Rmxhc2g6OkZsYXNoSGFzaHsABjoKQHVzZWR7AA%3D%3D--884981fc5aa85daf318eeff084d98e2cff92578f; path=/; expires=Wed, 01 Jan 2020 08:00:00 GMT; HttpOnly
Cache-control: private, max-age=0, must-revalidate

{"commit":{"added":[{"filename":"test/fixtures/for_each_ref"},{"filename":"test/fixtures/rev_list"},{"filename":"test/test_commit.rb"}],"modified":[{"diff":"@@ -1,5 +1,3 @@\n-# -*- ruby -*-\n-\n require 'rubygems'\n require 'hoe'\n require './lib/grit.rb'\n@@ -14,4 +12,7 @@ Hoe.new('grit', Grit::VERSION) do |p|\n   p.changes = p.paragraphs_of('History.txt', 0..1).join(\"\\n\\n\")\n end\n \n-# vim: syntax=Ruby\n+desc \"Open an irb session preloaded with this library\"\n+task :console do\n+  sh \"irb -rubygems -r ./lib/grit.rb\"\n+end\n\\ No newline at end of file","filename":"Rakefile"},{"diff":"@@ -1,3 +1,56 @@\n module Grit\n-  Commit = Struct.new(:id, :parents, :tree, :author, :authored_date, :committer, :committed_date)\n-end\n\\ No newline at end of file\n+  \n+  class Commit\n+    attr_accessor :id\n+    attr_accessor :parents\n+    attr_accessor :tree\n+    attr_accessor :author\n+    attr_accessor :authored_date\n+    attr_accessor :committer\n+    attr_accessor :committed_date\n+    attr_accessor :message\n+    \n+    def initialize(id, parents, tree, author, authored_date, committer, committed_date, message)\n+      self.id = id\n+      self.parents = parents\n+      self.tree = tree\n+      self.author = author\n+      self.authored_date = authored_date\n+      self.committer = committer\n+      self.committed_date = committed_date\n+      self.message = message\n+    end\n+    \n+    def self.list_from_string(text)\n+      # remove surrounding whitespace from each line and remove empty lines\n+      lines = text.split(\"\\n\").map { |l| l.strip }.select { |l| !l.empty? }\n+      \n+      commits = []\n+      \n+      while !lines.empty?\n+        id = lines.shift.split.last\n+        tree = lines.shift.split.last\n+        \n+        parents = []\n+        parents << lines.shift.split.last while lines.first =~ /^parent/\n+        \n+        author, authored_date = self.actor(lines.shift)\n+        committer, committed_date = self.actor(lines.shift)\n+        \n+        message = lines.shift\n+        \n+        commits << Commit.new(id, parents, tree, author, authored_date, committer, committed_date, message)\n+      end\n+      \n+      commits\n+    end\n+    \n+    # private\n+    \n+    def self.actor(line)\n+      m, actor, epoch = *line.match(/^.+? (.*) (\\d+) .*$/)\n+      [actor, Time.at(epoch.to_i)]\n+    end\n+  end # Commit\n+  \n+end # Grit\n\\ No newline at end of file","filename":"lib/grit/commit.rb"},{"diff":"@@ -7,17 +7,23 @@ module Grit\n   \n     self.git_binary = \"/usr/bin/env git\"\n     \n+    attr_accessor :git_dir\n+    \n+    def initialize(git_dir)\n+      self.git_dir = git_dir\n+    end\n+    \n     # Run the given git command with the specified arguments and return\n     # the result as a chomped String\n     #   +cmd+ is the command\n     #   +args+ is the list of arguments (to be joined by spaces)\n     #\n     # Examples\n-    #   Grit::Git.rev_list('--parents', '--history')\n+    #   git.rev_list('--parents', '--header')\n     #\n     # Returns String\n-    def self.method_missing(cmd, *args)\n-      `#{Git.git_binary} #{cmd.to_s.gsub(/_/, '-')} #{args.join(' ')}`.chomp\n+    def method_missing(cmd, *args)\n+      `#{Git.git_binary} --git-dir='#{self.git_dir}' #{cmd.to_s.gsub(/_/, '-')} #{args.join(' ')}`.chomp\n     end\n   end # Git\n   ","filename":"lib/grit/git.rb"},{"diff":"@@ -20,6 +20,8 @@ module Grit\n       else\n         raise InvalidGitRepositoryError.new(path) unless File.exist?(path)\n       end\n+      \n+      @git = Git.new(self.path)\n     end\n   \n     # Return the project's description. Taken verbatim from REPO/description\n@@ -34,7 +36,7 @@ module Grit\n     #\n     # Returns Grit::Head[]\n     def heads\n-      output = Git.for_each_ref(\n+      output = @git.for_each_ref(\n                  \"--sort=-committerdate\",\n                  # \"--count=1\",\n                  \"--format='%(objectname) %(refname) %(subject)%00%(committer)'\",\n@@ -50,7 +52,16 @@ module Grit\n     end\n     \n     def branches\n-      Git.branch.split(\"\\n\").map { |b| b.sub(/\\*/, '').lstrip }\n+      @git.branch('--no-color').split(\"\\n\").map { |b| b.sub(/\\*/, '').lstrip }\n+    end\n+    \n+    def commits(num = 1, start = 'master')\n+      output = @git.rev_list(\n+                 \"--pretty=raw\",\n+                 \"-n #{num}\", \n+                 start)\n+                 \n+      Commit.list_from_string(output)\n     end\n   end # Repo\n   ","filename":"lib/grit/repo.rb"},{"diff":"@@ -6,4 +6,8 @@ require 'mocha'\n \n GRIT_REPO = File.join(File.dirname(__FILE__), *%w[..])\n \n-include Grit\n\\ No newline at end of file\n+include Grit\n+\n+def fixture(name)\n+  File.read(File.join(File.dirname(__FILE__), 'fixtures', name))\n+end\n\\ No newline at end of file","filename":"test/helper.rb"},{"diff":"@@ -1,8 +1,11 @@\n require File.dirname(__FILE__) + '/helper'\n \n class TestGit < Test::Unit::TestCase\n+  def setup\n+    @git = Git.new(File.join(File.dirname(__FILE__), *%w[..]))\n+  end\n   \n   def test_method_missing\n-    assert_match /^git version [\\d\\.]*$/, Git.version\n+    assert_match /^git version [\\d\\.]*$/, @git.version\n   end\n end\n\\ No newline at end of file","filename":"test/test_git.rb"},{"diff":"@@ -20,8 +20,7 @@ class TestRepo < Test::Unit::TestCase\n   end\n   \n   def test_heads_should_populate_head_data\n-    Git.expects(:for_each_ref).returns(\"634396b2f541a9f2d58b00be1a07f0c358b999b3 refs/heads/master \\\n-    initial grit setup\\0Tom Preston-Werner <tom@mojombo.com> 1191997100 -0700\")\n+    Git.any_instance.expects(:for_each_ref).returns(fixture('for_each_ref'))\n     \n     head = @g.heads.first\n     \n@@ -39,4 +38,22 @@ class TestRepo < Test::Unit::TestCase\n     \n     assert_equal ['master'], branches\n   end\n+  \n+  # commits\n+  \n+  def test_commits\n+    Git.any_instance.expects(:rev_list).returns(fixture('rev_list'))\n+    \n+    commits = @g.commits(10)\n+    \n+    c = commits.first\n+    assert_equal '4c8124ffcf4039d292442eeccabdeca5af5c5017', c.id\n+    assert_equal [\"634396b2f541a9f2d58b00be1a07f0c358b999b3\"], c.parents\n+    assert_equal \"672eca9b7f9e09c22dcb128c283e8c3c8d7697a4\", c.tree\n+    assert_equal \"Tom Preston-Werner <tom@mojombo.com>\", c.author\n+    assert_equal Time.at(1191999972), c.authored_date\n+    assert_equal \"Tom Preston-Werner <tom@mojombo.com>\", c.committer\n+    assert_equal Time.at(1191999972), c.committed_date\n+    assert_equal \"implement Grit#heads\", c.message\n+  end\n end\n\\ No newline at end of file","filename":"test/test_repo.rb"}],"removed":[],"parents":[{"id":"d837bd432d63b740b62d964dda48818bd97e778b"}],"author":{"name":"Tom Preston-Werner","login":"mojombo","email":"tom@mojombo.com"},"url":"http://github.com/mojombo/grit/commit/2c6af5a45ddf8b539e8481d7bf9dff4bc71dde78","id":"2c6af5a45ddf8b539e8481d7bf9dff4bc71dde78","committed_date":"2007-10-10T23:20:54-07:00","authored_date":"2007-10-10T23:20:54-07:00","message":"implement Repo.commits","tree":"f86a29df0aa853135af8eb3593ed38766542b86d","committer":{"name":"Tom Preston-Werner","login":"mojombo","email":"tom@mojombo.com"}}}